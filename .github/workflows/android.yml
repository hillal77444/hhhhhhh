name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'اختر العملية المطلوبة'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - download

jobs:
  build:
    if: github.event.inputs.action == 'build' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      RELEASE_STORE_FILE: keystore.jks
      RELEASE_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "9477386"
          packages: |
            build-tools;33.0.2
            platform-tools
            platforms;android-24
            tools
            extras;android;m2repository
            extras;google;m2repository
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false
      - name: Install Android SDK components
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-24"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "tools"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "extras;android;m2repository"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "extras;google;m2repository"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Check keystore exists
        run: |
          if [ ! -f "keystore.jks" ]; then
            echo "Error: keystore.jks not found!"
            exit 1
          fi
          echo "Keystore file exists"
      - name: Create gradle.properties
        run: |
          echo "RELEASE_STORE_FILE=keystore.jks" >> app/gradle.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> app/gradle.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> app/gradle.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> app/gradle.properties
      - name: Create proguard-rules.pro
        run: |
          cat > app/proguard-rules.pro << 'EOL'
          # Retrofit
          -keepattributes Signature
          -keepattributes *Annotation*
          -keep class retrofit2.** { *; }
          -keepclasseswithmembers class * {
              @retrofit2.http.* <methods>;
          }
          -keepclassmembers,allowshrinking,allowobfuscation interface * {
              @retrofit2.http.* <methods>;
          }

          # OkHttp
          -keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase
          -dontwarn org.codehaus.mojo.animal_sniffer.*
          -dontwarn okhttp3.internal.platform.ConscryptPlatform
          -dontwarn org.conscrypt.ConscryptHostnameVerifier
          -keep class okhttp3.** { *; }
          -keep interface okhttp3.** { *; }

          # Gson
          -keepattributes Signature
          -keepattributes *Annotation*
          -dontwarn sun.misc.**
          -keep class com.google.gson.** { *; }
          -keep class * implements com.google.gson.TypeAdapterFactory
          -keep class * implements com.google.gson.JsonSerializer
          -keep class * implements com.google.gson.JsonDeserializer
          -keepclassmembers,allowobfuscation class * {
            @com.google.gson.annotations.SerializedName <fields>;
          }

          # Keep your model classes
          -keep class com.hillal.hhhhhhh.data.model.** { *; }
          -keep class com.hillal.hhhhhhh.data.remote.** { *; }
          -keep class com.hillal.hhhhhhh.ui.** { *; }
          -keep class com.hillal.hhhhhhh.utils.** { *; }

          # Keep Room
          -keep class * extends androidx.room.RoomDatabase
          -keep @androidx.room.Entity class *
          -keep @androidx.room.Dao interface *
          -keep @androidx.room.TypeConverters class *
          -keep class * extends androidx.room.RoomDatabase$Callback
          -keep class * extends androidx.room.RoomDatabase$Migration

          # Keep Navigation Component
          -keepnames class androidx.navigation.fragment.NavHostFragment
          -keepnames class * extends android.os.Parcelable
          -keepnames class * extends java.io.Serializable
          -keepnames class androidx.navigation.** { *; }

          # Keep ViewBinding
          -keep class * implements androidx.viewbinding.ViewBinding {
              public static *** bind(android.view.View);
              public static *** inflate(android.view.LayoutInflater, android.view.ViewGroup, boolean);
          }
          -keep class * implements androidx.viewbinding.ViewBinding {
              public static *** inflate(...);
          }

          # Keep Kotlin Coroutines
          -keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
          -keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}
          -keepclassmembers class kotlinx.coroutines.** {
              volatile <fields>;
          }
          -keepclassmembers class kotlin.coroutines.** {
              volatile <fields>;
          }

          # Keep Lifecycle
          -keep class * extends androidx.lifecycle.ViewModel
          -keep class * extends androidx.lifecycle.AndroidViewModel
          -keep class * extends androidx.lifecycle.LiveData
          -keep class * extends androidx.lifecycle.MutableLiveData
          -keep class * extends androidx.lifecycle.MediatorLiveData

          # Keep iText PDF
          -keep class com.itextpdf.** { *; }
          -keep class com.lowagie.** { *; }
          -keep class org.bouncycastle.** { *; }

          # Keep Kotlin
          -keep class kotlin.** { *; }
          -keep class kotlin.Metadata { *; }
          -dontwarn kotlin.**
          -keepclassmembers class **$WhenMappings {
              <fields>;
          }
          -keepclassmembers class kotlin.Metadata {
              public <methods>;
          }

          # Keep AndroidX
          -keep class androidx.** { *; }
          -keep interface androidx.** { *; }
          -keep class android.** { *; }
          -keep interface android.** { *; }

          # Keep R8
          -keepattributes SourceFile,LineNumberTable
          -keepattributes *Annotation*
          -keepattributes Signature
          -keepattributes Exceptions
          EOL
      - name: Build Release APK
        run: |
          echo "android.injected.signing.store.file=keystore.jks" >> app/gradle.properties
          echo "android.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }}" >> app/gradle.properties
          echo "android.injected.signing.key.alias=${{ secrets.KEY_ALIAS }}" >> app/gradle.properties
          echo "android.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}" >> app/gradle.properties
          ./gradlew assembleRelease --stacktrace
      - name: Check APK exists
        run: |
          if [ ! -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "APK file not found!"
            ls -la app/build/outputs/apk/release/
            exit 1
          fi
          echo "APK file exists"
      - name: Sign APK
        run: |
          echo "Checking for APK..."
          if [ ! -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "Error: app-release.apk not found!"
            ls -la app/build/outputs/apk/release/
            exit 1
          fi
          echo "Zipaligning APK..."
          $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/app-release-aligned.apk
          echo "Signing APK..."
          $ANDROID_HOME/build-tools/34.0.0/apksigner sign --ks keystore.jks --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} --ks-key-alias ${{ secrets.KEY_ALIAS }} --key-pass pass:${{ secrets.KEY_PASSWORD }} app/build/outputs/apk/release/app-release-aligned.apk
          echo "Moving final APK..."
          mv app/build/outputs/apk/release/app-release-aligned.apk app/build/outputs/apk/release/app-release.apk
          echo "Calculating SHA256 of signed APK..."
          sha256sum app/build/outputs/apk/release/app-release.apk
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/app-release.apk

  download:
    if: github.event.inputs.action == 'download'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create ZIP file
        run: zip -r project.zip . -x "*.git*" "*.gradle*" "build/*" "app/build/*"
      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: project-files
          path: project.zip
